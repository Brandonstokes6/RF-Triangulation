#include <msp430.h>
#define TXD BIT2
#define RXD BIT1

int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
  if (CALBC1_1MHZ==0xFF)                    // If calibration constant erased
  {
    while(1);                               // do not load, trap here
  }
  DCOCTL = 0;                               // Select lowest DCOx and MODx settings
  BCSCTL1 = CALBC1_1MHZ;                    // Set DCO
  DCOCTL = CALDCO_1MHZ;
  P2DIR |= 0xFF;
  P2OUT &= 0x00;
  IFG2 &= ~UCA0TXIFG;         //clear the TX flag

  UCA0IRRCTL |= UCIRRXPL;

  P1SEL = TXD | RXD;                     // P1.1 = RXD, P1.2=TXD
  P1SEL2 = TXD | RXD;                       // P1.1 = RXD, P1.2=TXD
  UCA0CTL1 = UCSWRST;    //Place UCA0 in reset to configure?
  UCA0CTL1 |= UCSSEL_2;                     // SMCLK
  UCA0BR0 = 208;                            // 1MHz 4800, slower = less loss
  UCA0BR1 = 0;                              // 1MHz 4800
  UCA0MCTL = UCBRS1;                        // Modulation UCBRSx = 1
  UCA0CTL1 &= ~UCSWRST;                     // Initialize the USCI state machine
  IE2 |= UCA0RXIE;                          // Enable USCI_A0 RX interrupt
  __bis_SR_register(LPM0_bits + GIE);       // Enter LPM0, interrupts enabled
}                                           // Wait for RX interrupt
//  Echo back RXed character, confirm TX buffer is ready first though
#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void)
{
  while(!(IFG2&UCA0TXIFG));               // USCI_A0 TX buffer ready?
  UCA0TXBUF = UCA0RXBUF;                    // Send TX the RXed character
}
